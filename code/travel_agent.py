# Text processing and file operations
from textwrap import dedent
import os
import io
import base64
from typing import List

# Web app and visualization libraries
import streamlit as st
import numpy as np
import matplotlib.pyplot as plt

# Data validation
from pydantic import BaseModel, Field

# AI agent libraries
from agno.agent.agent import Agent
from agno.models.groq.groq import Groq
from agno.tools.duckduckgo import DuckDuckGoTools

# DATA MODELS
# ===========
# Define Pydantic models for structured data

# Single day activity model
class DailyActivity(BaseModel):
    description: str = Field(
        ...,
        description="The description of the activity for the day "
        "and includes the day number as prefix, e.g 'Day 1: Arrive'")


# Complete itinerary model containing all days
class Itinerary(BaseModel):
    days: List[DailyActivity] = Field(
        ...,
        description="A list of activities for each day of the trip",
    )


# Cost breakdown model with all expense categories
class Cost(BaseModel):
    totalcost: int = Field(
        ...,
        description="The overall cost of the trip, including all expenses.")
    accommodationcost: int = Field(
        ...,
        description=
        "The cost of lodging during the trip, such as hotels or Airbnb rentals."
    )
    transportcost: int = Field(
        ...,
        description=
        "The cost of transportation, including flights, trains, car rentals, or public transit."
    )
    ticketcost: int = Field(
        ...,
        description=
        "The cost of tickets for attractions, tours, or events during the trip."
    )
    foodcost: int = Field(
        ..., description="The cost of meals and snacks during the trip")


# Main output model that combines all trip information
class Output(BaseModel):
    destination: str = Field(...,
                             description="The main destination of the trip.")
    duration: int = Field(..., description="The number of days for the trip.")
    cost: Cost = Field(..., description="The cost details of the trip.")
    itinerary: Itinerary = Field(
        ..., description="The detailed itinerary of the trip")


# VISUALIZATION FUNCTIONS
# ======================
def create_pie_chart(cost_obj):
    """Create and return a pie chart showing cost distribution"""
    # Extract cost values from our cost object into a list
    cost_pie_chart = [
        cost_obj.accommodationcost,  # Housing/lodging costs
        cost_obj.transportcost,      # Travel/transportation costs
        cost_obj.ticketcost,         # Tickets for attractions/events
        cost_obj.foodcost            # Food and dining expenses
    ]
    # Convert to numpy array for plotting
    y = np.array(cost_pie_chart)
    
    # Labels and colors for each slice of the chart
    labels = ["Accommodation", "Transport", "Ticket", "Food"]
    colors = ["#ff69b4", "#66b3ff", "#ffff99", "#ccccff"]
    
    # Create the figure and axis for our chart
    fig, ax = plt.subplots()

    # Helper function to convert percentages to dollar amounts on the chart
    def absolute_value(val):
        a = np.round(val / 100. * y.sum(), 0)  # Calculate the dollar amount
        return f'${int(a)}'  # Format as dollar string

    # Create the pie chart with our data and styling
    ax.pie(y,
           labels=labels,
           autopct=absolute_value,
           startangle=90,
           colors=colors)
    ax.axis('equal')  # Make the pie circular rather than oval

    return fig


# DOCUMENT CREATION FUNCTIONS
# ==========================
def save_markdown(destination, markdown_content, fig, cost_obj):
    """Creates a downloadable travel plan document with the itinerary and cost chart"""
    # Step 1: Convert the pie chart to an image that can be embedded in our document
    buf = io.BytesIO()  # Create a memory buffer
    fig.savefig(buf, format='png')  # Save the chart as PNG to the buffer
    data = base64.b64encode(buf.getbuffer()).decode(
        "ascii")  # Convert to text format that works in documents

    # Step 2: Create the document content with a nice title and structure
    formatted_content = f"""# AI Travel Planner: {destination} Itinerary

This itinerary was generated by an AI Travel Planner.

## Itinerary:

"""

    # Step 3: Extract just the daily activities from our content
    for line in markdown_content.split('\n'):
        if line.strip().startswith('Day '):
            formatted_content += f"{line.strip()}\n\n"

    # Step 4: Add the cost breakdown chart to the document
    formatted_content += f"""## Cost Breakdown:

![Cost Breakdown Pie Chart](data:image/png;base64,{data})
"""

    # Step 5: Save the content as a Markdown file
    markdown_filename = f"{destination}_itinerary.md"
    with open(markdown_filename, "w", encoding="utf-8") as f:
        f.write(formatted_content)

    # Step 6: Try to convert the Markdown to a nicer PDF if possible
    download_file = markdown_filename  # Default to markdown if PDF conversion fails
    try:
        # Use pandoc (a document converter) to create a PDF
        cmd = (f"pandoc {markdown_filename} "
               f"--pdf-engine=xelatex "
               f"-V geometry:margin=1in "
               f"--standalone "
               f"-o {destination}_itinerary.pdf")
        # Run the command to create the PDF
        res = os.system(cmd)
        # If the PDF was created successfully
        if res == 0 and os.path.exists(f"{destination}_itinerary.pdf"):
            download_file = f"{destination}_itinerary.pdf"
            # Read PDF file for download
            with open(download_file, "rb") as f:
                download_data = f.read()
        else:
            # If PDF conversion failed, use the Markdown file instead
            with open(markdown_filename, "rb") as f:
                download_data = f.read()
    except:
        # If any error occurs, fall back to the Markdown file
        with open(markdown_filename, "rb") as f:
            download_data = f.read()
    # Return both the filename and the file content
    return download_file, download_data


# MAIN APPLICATION
# ===============
def main():
    # Step 1: Set up Streamlit application interface
    # ---------------------------------------------
    st.title("AI Travel Planner ✈️")
    st.caption(
        "Plan your next adventure with AI Travel Planner by researching and planning a personalized itinerary on autopilot using llama"
    )

    # Step 2: Set up API connection
    # ----------------------------
    # API key (in production, use environment variables or key management systems)
    groq_api_key = "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"

    # Step 3: Create research agent
    # ----------------------------
    # This AI agent will search the web for travel information
    researcher = Agent(
        name="TravelResearcher",
        role="Travel Information Gatherer",
        model=Groq(id="llama-3.3-70b-versatile", api_key=groq_api_key),
        description=dedent(
            "Gather travel info using web search and provide a well-structured summary of findings."
        ),
        instructions=[
            "1. Analyze Request: Understand destination, duration, group size, budget.",
            "2. Formulate Queries: Generate 3-5 focused search queries for relevant activities, potential hotels (considering budget/group size), typical costs (per person if possible), and specific locations/addresses.",
            "3. Execute Search: Use available tools to execute web searches for each query.",
            "4. Synthesize & Format Findings: Compile a clear summary of the most relevant findings. Structure the output text like this:",
            "   ```text",
            "   **Potential Activities:**",
            "   - [Activity Name 1]: [Brief Description]. Cost: [e.g., $50/person or $100 total or Free]. Location: [Specific Address or Area].",
            "   - [Activity Name 2]: [Brief Description]. Cost: [e.g., $XX]. Location: [Specific Address or Area].",
            "   ...(List 5-10 relevant activities found)...",
            "",
            "   **Hotel Suggestions:**",
            "   - [Hotel Name 1]: Approx. [Price /Night, e.g., $150]. Address: [Hotel Address]. Note: [Brief reasoning/feature found].",
            "   ...(List 1-3 relevant hotels found)...",
            "",
            "   **General Cost Notes:**",
            "   - Daily Food Estimate: ~$X per person.",
            "   - Local Transport Estimate: ~$Y per person per day.",
            "   ```",
            "5. Return Summary: Output *only* this structured text summary. Be informative but reasonably concise. Ensure costs and locations are included for each item.",
        ],
        tools=[DuckDuckGoTools()],  # Enable web search capability
        add_datetime_to_instructions=True,  # Include current date/time info
    )

    # Step 4: Create planning agent
    # ----------------------------
    # This AI agent will organize the research into a complete travel plan
    planner = Agent(
        name="ItineraryPlanner",
        role="Travel Itinerary Scheduler & Strict Formatter",
        model=Groq(id="llama-3.3-70b-versatile", api_key=groq_api_key),
        description=dedent(
            "Create a detailed itinerary by scheduling activities from research, then strictly format the output according to the Pydantic model, ensuring clean data types and values (especially integer costs)."
        ),
        instructions=[
            "1. Receive Input: User request (destination, days, people, budget) AND a structured text block summarizing research findings.",
            "2. Analyze & Select: Review user request and potential activities/hotels from research.",
            "3. Schedule Activities: Create a logical day-by-day itinerary for the specified duration, selecting activities from the research list. Ensure a balanced schedule.",
            "4. Determine Daily Details & Costs: For EACH scheduled day:",
            "   - Identify the main activities.",
            "   - Calculate the final estimated cost as a single **integer** value in USD for that day's scheduled activities (for the whole group). Resolve ranges/per-person costs. Store this single integer.",
            "   - Identify the most relevant specific address string.",
            "5. Select Hotel & Determine Price: Select ONE hotel from the research suggestions. Determine its estimated price per night as a single **integer** value (e.g., midpoint of range).",
            "6. Calculate Aggregate Costs: Based on the scheduled plan, the selected hotel (using the integer price from step 5), and daily cost notes: Calculate the *total* **integer** costs for `accommodationcost`, `transportcost`, `ticketcost`, and `foodcost` for the entire trip. Sum these to get the overall `totalcost` **integer**.",
            "7. **CRITICAL FINAL FORMATTING STEP:** Before generating the final JSON output:",
            "   - Review ALL fields.",
            "   - Ensure ALL `Cost` fields (`totalcost`, `accommodationcost`, etc.) contain **only integer values** based on your step 6 calculations.",
            "   - Ensure EACH `DailyActivity.estimated_cost` contains **only the single integer value** calculated in step 4. **NO ranges, '$', '/person', text.**",
            "   - Ensure EACH `DailyActivity.address` contains a clean, specific address string or relevant area name.",
            "   - Ensure `HotelSuggestion.estimated_price_per_night` contains **only the single integer value** determined in step 5. **NO ranges, '$'.**",
            "   - Verify all other string fields contain only the intended text.",
            "8. Generate Output: Structure the *final, reviewed, and correctly formatted* data strictly according to the `Output` Pydantic model, ensuring all integer fields contain only numbers.",
            "9. Suggest Image Prompts: Generate 2-3 prompts based on the scheduled activities.",
        ],
        add_datetime_to_instructions=True,  # Include current date/time info
        response_model=Output,  # Use our Output model for structured results
    )

    # Step 5: Create user input interface
    # ----------------------------------
    # Create input fields for user information
    destination = st.text_input("Where do you want to go?")
    # Set reasonable min values and defaults
    num_days = st.number_input("How many days do you want to travel for?",
                               min_value=1,    # Minimum 1 day
                               max_value=30,   # Maximum 30 days
                               value=1)        # Default is 1 day
    num_persons = st.number_input("How many persons for this trip?",
                                  min_value=1,  # Minimum 1 person
                                  value=1)      # Default is 1 person
    total_budget = st.number_input(
        "How much is the estimated travel expense (US dollar)?",
        min_value=0,   # Minimum $0
        value=0)       # Default is $0

    # Step 6: Handle the generate button and processing
    # -----------------------------------------------
    if st.button("Generate Itinerary"):
        # Step 6.1: Input validation
        if not destination:
            st.error("Please enter a destination")
            return

        # Step 6.2: Research phase
        # Perform travel research using the AI agent
        with st.spinner("Researching travel information..."):
            # Create the search prompt with user inputs
            research_prompt = f"{destination} for {num_days} days for {num_persons} persons under {total_budget} US dollar"
            # Run the research agent and get results
            research_response = researcher.run(research_prompt, stream=False)
            # Display the research findings
            st.subheader("Research Findings")
            st.write(research_response.content)
            
        # Step 6.3: Planning phase
        # Create the detailed itinerary using the AI agent
        with st.spinner("Creating your itinerary..."):
            # Format the prompt with research results
            planner_prompt = f"""
            **User Request:** Destination: {destination}, Duration: {num_days} days, People: {num_persons}, Budget: ~${total_budget} USD.

            **Research Findings (Potential Options):**
            ```text
            {research_response.content}
            ```
            """
            # Run the planning agent to create the itinerary
            response = planner.run(planner_prompt, stream=False)

            # Step 6.4: Process and display results
            # If we got a valid response in the expected format
            if isinstance(response.content, Output):
                # Extract the different components
                output_obj = response.content        # Full output
                itinerary_obj = output_obj.itinerary # Just the itinerary
                cost_obj = output_obj.cost           # Just the costs

                # Start creating content for our downloadable document
                markdown_content = f"""
                # AI Travel Planner: {destination} Itinerary

                This itinerary was generated by an AI Travel Planner.

                ## Itinerary:
                """

                # Display the day-by-day itinerary
                st.subheader("Your Itinerary")
                for day in itinerary_obj.days:
                    st.write(day.description)
                    markdown_content += f"{day.description}\n\n"

                st.divider()  # Add a visual separator

                # Display the cost information
                st.header("Cost Breakdowns 💰")
                
                # Create and show the cost pie chart
                fig = create_pie_chart(cost_obj)
                st.pyplot(fig)
                
                # Show the total cost as a headline
                st.subheader(f"Total Cost: {cost_obj.totalcost}US$")

                # Create the downloadable document
                download_file, download_data = save_markdown(
                    destination, markdown_content, fig, cost_obj)

                # Set the correct file type for download
                mime_type = "application/pdf" if download_file.endswith(
                    ".pdf") else "text/markdown"
                    
                # Add a download button for the user
                st.download_button(
                    label="Download Travel Plan",
                    data=download_data,
                    file_name=download_file,
                    mime=mime_type,
                )
            else:
                # Handle errors if the response wasn't in the expected format
                st.error("Failed to generate itinerary")


# Standard Python entry point pattern
# Only runs the main function when this file is executed directly
if __name__ == "__main__":
    main()